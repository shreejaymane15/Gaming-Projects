Paddle = Class{}

--[[
    Our paddle will initailize at the same spot every time, in the middle
    of our world horizontally, toward the bottom
]]

function paddle:init()
    -- x is placed in the middle
    self.x = VIRTUAL_WIDTH / 2 - 32

    -- y is plcaed little above the bottom edge of the screen
    self.y = VIRTUAL_HEIGHT - 32

    -- start us off with no velocity
    self.dx = 0

    --  starting dimensions
    self.width = 64
    self.height = 16

    -- the skin only has the effect of changing our color, used to offset us into 
    -- the gPaddleSkins table later
    self.skin = 1

    -- the varient is which of the four paddle sizes we currently are; 2 is
    -- the starting size, as the smallest is too tougn to start with
    self.size = 2
end


function Paddle:upadate(dt)
    -- keyboard input
    if love.keyborard.isDown('left') then
        self.dx = - PADDLE_SPEED
    elseif love.keyboard.isDown('right') then
        self.dx = PADDLE_SPEED
    else 
        self.dx = 0
    end

    -- math.max here ensures that we're the greater of 0 or the player's 
    -- current calculated Y position when pressing up so that we don't
    -- go into the negatives; the movement calculations is simple our previously defined 
    -- paddle speed scaled by dt 
    if self.dx < 0 then
        self.x = math.max(0, self.x + self.dx + dt)
    else
        self.x = math.min(VIRTUAL_WIDTH - self.width, self.x, self.x + self.dx * dt )
    end
end


--[[
    Render paddle by drwing the main texture 
]]

function Paddle:render()
    love.graphics.draw(gTextures['main'], gFrames['paddles'] [self.size + 4 * ( self.skin - 1)], self.x, self.y)
end